package com.springboot.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.springboot.model.Item;
import com.springboot.model.ItemImage;
import com.springboot.model.User;
import com.springboot.model.enums.ItemStatus;
import com.springboot.repository.ItemRepository;

@Service
public class ItemService {
	@Autowired
	private ItemRepository itemRepository;

	@Value("${file.upload-dir}")
	private String uploadDir;

	public void saveItem(Item item) {
		itemRepository.save(item);
	}

	@Transactional
	public void saveItemWithImages(Item item, MultipartFile thumbnail, List<MultipartFile> images) {
		List<ItemImage> imageList = new ArrayList<>();

		try {
			System.out.println("üìÅ [DEBUG] Upload directory: " + uploadDir);

			// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
			Path uploadPath = Paths.get(uploadDir);
			if (!Files.exists(uploadPath)) {
				Files.createDirectories(uploadPath);
				System.out.println("‚úÖ [DEBUG] Created upload directory");
			}

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Thumbnail
			if (thumbnail != null && !thumbnail.isEmpty()) {
				String originalFilename = thumbnail.getOriginalFilename();
				String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
				String fileName = UUID.randomUUID() + extension;
				Path filePath = uploadPath.resolve(fileName);

				Files.copy(thumbnail.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
				System.out.println("‚úÖ [DEBUG] Saved thumbnail: " + fileName);

				ItemImage thumbImg = new ItemImage();
				thumbImg.setImageUrl("/uploads/" + fileName);
				thumbImg.setThumbnail(true);
				thumbImg.setItem(item);
				imageList.add(thumbImg);
			}

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡∏¥‡∏°
			if (images != null && !images.isEmpty()) {
				int savedCount = 0;
				for (MultipartFile file : images) {
					if (file != null && !file.isEmpty()) {
						String originalFilename = file.getOriginalFilename();
						String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
						String fileName = UUID.randomUUID() + extension;
						Path filePath = uploadPath.resolve(fileName);

						Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
						System.out.println("‚úÖ [DEBUG] Saved image " + (++savedCount) + ": " + fileName);

						ItemImage img = new ItemImage();
						img.setImageUrl("/uploads/" + fileName);
						img.setThumbnail(false);
						img.setItem(item);
						imageList.add(img);
					}
				}
				System.out.println("‚úÖ [DEBUG] Total images saved: " + savedCount);
			}

			// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á images ‡∏Å‡∏±‡∏ö item
			item.setImages(imageList);

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
			Item savedItem = itemRepository.save(item);
			System.out.println("‚úÖ [SUCCESS] Item saved with ID: " + savedItem.getItemId());
			System.out.println("‚úÖ [SUCCESS] Total images in DB: " + savedItem.getImages().size());

		} catch (IOException e) {
			System.err.println("‚ùå [ERROR] Failed to upload files: " + e.getMessage());
			e.printStackTrace();
			throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: " + e.getMessage(), e);
		} catch (Exception e) {
			System.err.println("‚ùå [ERROR] Unexpected error: " + e.getMessage());
			e.printStackTrace();
			throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + e.getMessage(), e);
		}
	}

	// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public List<Item> getAllItems() {
        return itemRepository.findAll();
    }

    public List<Item> searchAndFilter(String keyword, String type, String category, String condition) {
        keyword = (keyword == null) ? "" : keyword.trim().toLowerCase();

        // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢
        if (keyword.isEmpty() && type.equals("all") && category.equals("all") && condition.equals("all")) {
            return itemRepository.findAll();
        }

        return itemRepository.searchFilteredItems(keyword, type, category, condition);
    }
    
    public List<Item> findItemsByUser(User user) {
        return itemRepository.findByUserOrderByCreatedAtDesc(user);
    }
    
    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà "‡∏ß‡πà‡∏≤‡∏á"
    public List<Item> getAvailableItems(User user) {
        return itemRepository.findByUserAndStatusOrderByCreatedAtDesc(user, ItemStatus.‡∏ß‡πà‡∏≤‡∏á);
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà "‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
    public List<Item> getSwappedItems(User user) {
        return itemRepository.findByUserAndStatusOrderByCreatedAtDesc(user, ItemStatus.‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡πâ‡∏ß);
    }
    
    @Transactional(readOnly = true)
    public Item getItemById(Integer id) {
        Optional<Item> itemOpt = itemRepository.findById(id);
        if (itemOpt.isEmpty()) {
            throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: " + id);
        }

        Item item = itemOpt.get();

        return item;
    }
}