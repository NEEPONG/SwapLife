package com.springboot.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.springboot.model.Category;
import com.springboot.model.Item;
import com.springboot.model.ItemImage;
import com.springboot.model.User;
import com.springboot.model.enums.ItemCondition;
import com.springboot.model.enums.ItemStatus;
import com.springboot.model.enums.ListingType;
import com.springboot.repository.CategoryRepository;
import com.springboot.repository.ItemRepository;
import com.springboot.repository.SwapOfferRepository;

@Service
public class ItemService {
	@Autowired
	private ItemRepository itemRepository;
	
	@Autowired
	private SwapOfferRepository swapOfferRepository;
	
	@Autowired
	private CategoryRepository categoryRepository;

	@Value("${file.upload-dir}")
	private String uploadDir;

	public void saveItem(Item item) {
		itemRepository.save(item);
	}

	@Transactional
	public void saveItemWithImages(Item item, MultipartFile thumbnail, List<MultipartFile> images) {
		List<ItemImage> imageList = new ArrayList<>();

		try {
			System.out.println("üìÅ [DEBUG] Upload directory: " + uploadDir);

			// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
			Path uploadPath = Paths.get(uploadDir);
			if (!Files.exists(uploadPath)) {
				Files.createDirectories(uploadPath);
				System.out.println("‚úÖ [DEBUG] Created upload directory");
			}

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Thumbnail
			if (thumbnail != null && !thumbnail.isEmpty()) {
				String originalFilename = thumbnail.getOriginalFilename();
				String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
				String fileName = UUID.randomUUID() + extension;
				Path filePath = uploadPath.resolve(fileName);

				Files.copy(thumbnail.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
				System.out.println("‚úÖ [DEBUG] Saved thumbnail: " + fileName);

				ItemImage thumbImg = new ItemImage();
				thumbImg.setImageUrl("/uploads/" + fileName);
				thumbImg.setThumbnail(true);
				thumbImg.setItem(item);
				imageList.add(thumbImg);
			}

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡∏¥‡∏°
			if (images != null && !images.isEmpty()) {
				int savedCount = 0;
				for (MultipartFile file : images) {
					if (file != null && !file.isEmpty()) {
						String originalFilename = file.getOriginalFilename();
						String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
						String fileName = UUID.randomUUID() + extension;
						Path filePath = uploadPath.resolve(fileName);

						Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
						System.out.println("‚úÖ [DEBUG] Saved image " + (++savedCount) + ": " + fileName);

						ItemImage img = new ItemImage();
						img.setImageUrl("/uploads/" + fileName);
						img.setThumbnail(false);
						img.setItem(item);
						imageList.add(img);
					}
				}
				System.out.println("‚úÖ [DEBUG] Total images saved: " + savedCount);
			}

			// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á images ‡∏Å‡∏±‡∏ö item
			item.setImages(imageList);

			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
			Item savedItem = itemRepository.save(item);
			System.out.println("‚úÖ [SUCCESS] Item saved with ID: " + savedItem.getItemId());
			System.out.println("‚úÖ [SUCCESS] Total images in DB: " + savedItem.getImages().size());

		} catch (IOException e) {
			System.err.println("‚ùå [ERROR] Failed to upload files: " + e.getMessage());
			e.printStackTrace();
			throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: " + e.getMessage(), e);
		} catch (Exception e) {
			System.err.println("‚ùå [ERROR] Unexpected error: " + e.getMessage());
			e.printStackTrace();
			throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + e.getMessage(), e);
		}
	}

	// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public List<Item> getAllItems() {
        return itemRepository.findAll();
    }

    public List<Item> searchAndFilter(String keyword, String type, String category, String condition) {
        keyword = (keyword == null) ? "" : keyword.trim().toLowerCase();

        return itemRepository.searchFilteredItems(keyword, type, category, condition, ItemStatus.‡∏ß‡πà‡∏≤‡∏á);
    }
    
    public List<Item> findItemsByUser(User user) {
        return itemRepository.findByUserOrderByCreatedAtDesc(user);
    }
    
    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà "‡∏ß‡πà‡∏≤‡∏á"
    public List<Item> getAvailableItems(User user) {
        return itemRepository.findByUserAndStatusOrderByCreatedAtDesc(user, ItemStatus.‡∏ß‡πà‡∏≤‡∏á);
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà "‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
    public List<Item> getSwappedItems(User user) {
        return itemRepository.findByUserAndStatusOrderByCreatedAtDesc(user, ItemStatus.‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡πâ‡∏ß);
    }
    
    @Transactional(readOnly = true)
    public Item getItemById(Integer id) {
        Optional<Item> itemOpt = itemRepository.findById(id);
        if (itemOpt.isEmpty()) {
            throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: " + id);
        }

        Item item = itemOpt.get();

        return item;
    }
    
    @Transactional
    public boolean deleteItemByUser(Integer itemId, User user) {
        Item item = itemRepository.findById(itemId)
            .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏µ‡πâ"));

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if (!item.getUser().equals(user)) {
            return false;
        }

        // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ item ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Äú‡∏ß‡πà‡∏≤‡∏á‚Äù
        if (item.getStatus() != ItemStatus.‡∏ß‡πà‡∏≤‡∏á) {
            return false;
        }

        // ‚úÖ ‡∏•‡∏ö SwapOffer ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö item ‡∏ô‡∏µ‡πâ (‡∏ó‡∏±‡πâ‡∏á‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏™‡∏ô‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ù‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏™‡∏ô‡∏≠)
        swapOfferRepository.deleteAllByOfferedItemOrRequestedItem(item, item);

        // ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (item.getImages() != null) {
            for (ItemImage img : item.getImages()) {
                try {
                    String filePath = img.getImageUrl().replaceFirst("^/", "");
                    Files.deleteIfExists(Paths.get(filePath));
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è [DEBUG] ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage());
                }
            }
        }

        // ‚úÖ ‡∏•‡∏ö Item ‡∏à‡∏£‡∏¥‡∏á
        itemRepository.delete(item);
        return true;
    }
    
 // ‡πÄ‡∏û‡∏¥‡πà‡∏° Method ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô ItemService.java

    @Transactional
    public boolean updateItem(Integer itemId, User user, String title, String description,
                              String itemConditionStr, Integer categoryId, String listingTypeStr,
                              String desiredItems, MultipartFile thumbnail, List<MultipartFile> images) {
        
        // ‚úÖ ‡∏î‡∏∂‡∏á Item ‡∏à‡∏≤‡∏Å DB
        Item item = itemRepository.findById(itemId)
            .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ"));
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if (!item.getUser().equals(user)) {
            return false;
        }
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà "‡∏ß‡πà‡∏≤‡∏á"
        if (item.getStatus() != ItemStatus.‡∏ß‡πà‡∏≤‡∏á) {
            return false;
        }
        
        try {
            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            item.setTitle(title.trim());
            item.setDescription(description.trim());
            item.setDesiredItems(desiredItems != null ? desiredItems.trim() : null);
            
            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Enum
            item.setItemCondition(ItemCondition.valueOf(itemConditionStr));
            item.setListingType(ListingType.valueOf(listingTypeStr));
            
            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Category
            Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"));
            item.setCategory(category);
            
            // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î)
            if ((thumbnail != null && !thumbnail.isEmpty()) || 
                (images != null && images.stream().anyMatch(f -> !f.isEmpty()))) {
                
                // üîπ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
                List<ItemImage> oldImages = new ArrayList<>(item.getImages());
                
                // üîπ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å List ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ removeIf ‡πÅ‡∏ó‡∏ô clear()
                item.getImages().removeIf(img -> true);
                
                // üîπ Flush ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Hibernate ‡∏•‡∏ö records ‡∏Å‡πà‡∏≠‡∏ô
                itemRepository.flush();
                
                // üîπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                for (ItemImage oldImg : oldImages) {
                    try {
                        String filePath = oldImg.getImageUrl().replaceFirst("^/", "");
                        Files.deleteIfExists(Paths.get(filePath));
                    } catch (Exception e) {
                        System.err.println("‚ö†Ô∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage());
                    }
                }
                
                // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                Path uploadPath = Paths.get(uploadDir);
                if (!Files.exists(uploadPath)) {
                    Files.createDirectories(uploadPath);
                }
                
                // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Thumbnail ‡πÉ‡∏´‡∏°‡πà
                if (thumbnail != null && !thumbnail.isEmpty()) {
                    String originalFilename = thumbnail.getOriginalFilename();
                    String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
                    String fileName = UUID.randomUUID() + extension;
                    Path filePath = uploadPath.resolve(fileName);
                    
                    Files.copy(thumbnail.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
                    
                    ItemImage thumbImg = new ItemImage();
                    thumbImg.setImageUrl("/uploads/" + fileName);
                    thumbImg.setThumbnail(true);
                    thumbImg.setItem(item);
                    item.getImages().add(thumbImg);
                }
                
                // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà
                if (images != null && !images.isEmpty()) {
                    for (MultipartFile file : images) {
                        if (file != null && !file.isEmpty()) {
                            String originalFilename = file.getOriginalFilename();
                            String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
                            String fileName = UUID.randomUUID() + extension;
                            Path filePath = uploadPath.resolve(fileName);
                            
                            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
                            
                            ItemImage img = new ItemImage();
                            img.setImageUrl("/uploads/" + fileName);
                            img.setThumbnail(false);
                            img.setItem(item);
                            item.getImages().add(img);
                        }
                    }
                }
            }
            
            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            itemRepository.save(item);
            System.out.println("‚úÖ [SUCCESS] Item updated with ID: " + item.getItemId());
            return true;
            
        } catch (IOException e) {
            System.err.println("‚ùå [ERROR] Failed to update files: " + e.getMessage());
            throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: " + e.getMessage(), e);
        } catch (Exception e) {
            System.err.println("‚ùå [ERROR] Failed to update item: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + e.getMessage(), e);
        }
    }

}